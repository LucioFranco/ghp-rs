var searchIndex = {};
searchIndex["ghp"] = {"doc":"`ghp-rs` was was created for the easy of moving any folder to\nany branch.","items":[[4,"Error","ghp","`Error` just neatly wraps the other errors used in the import.",null,null],[13,"Io","","",0,null],[13,"FromUtf8","","",0,null],[13,"Other","","",0,null],[5,"import_dir","","`import_dir` takes a directory, a branch and a message and will create a commit on that branch\nwith the contents of the directory.",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"cow"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","",null,null]],"paths":[[4,"Error"]]};
searchIndex["walkdir"] = {"doc":"Crate `walkdir` provides an efficient and cross platform implementation\nof recursive directory traversal. Several options are exposed to control\niteration, such as whether to follow symbolic links (default off), limit the\nmaximum number of simultaneous open file descriptors and the ability to\nefficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",null,null],[3,"Iter","","An iterator for recursively descending into a directory.",null,null],[3,"DirEntry","","A directory entry.",null,null],[3,"IterFilterEntry","","A recursive directory iterator that skips entries.",null,null],[3,"Error","","An error produced by recursively walking a directory.",null,null],[6,"Result","","A result type for walkdir operations.",null,null],[8,"WalkDirIterator","","A trait for recursive directory iterators.",null,null],[10,"skip_current_dir","","Skips the current directory.",0,{"inputs":[{"name":"walkdiriterator"}],"output":null}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips\ndescending into directories that do not satisfy the given predicate.",0,{"inputs":[{"name":"walkdiriterator"},{"name":"p"}],"output":{"name":"iterfilterentry"}}],[11,"new","","Create a builder for a recursive directory iterator starting at the\nfile path `root`. If `root` is a directory, then it is the first item\nyielded by the iterator. If `root` is a file, then it is the first\nand only item yielded by the iterator.",1,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"usize"}],"output":{"name":"self"}}],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",1,{"inputs":[{"name":"walkdir"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used\nby the iterator.",1,{"inputs":[{"name":"walkdir"},{"name":"usize"}],"output":{"name":"self"}}],[11,"into_iter","","",1,{"inputs":[{"name":"walkdir"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"skip_current_dir","","",2,{"inputs":[{"name":"iter"}],"output":null}],[11,"path","","The full path that this entry represents.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"path"}}],[11,"path_is_symbolic_link","","Returns `true` if and only if this entry was created from a symbolic\nlink. This is unaffected by the `follow_links` setting.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"bool"}}],[11,"metadata","","Return the metadata for the file that this entry points to.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points to.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"filetype"}}],[11,"file_name","","Return the file name of this entry.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"osstr"}}],[11,"depth","","Returns the depth at which this entry was created relative to the root.",3,{"inputs":[{"name":"direntry"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"direntry"}],"output":{"name":"direntry"}}],[11,"fmt","","",3,{"inputs":[{"name":"direntry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"iterfilterentry"}],"output":{"name":"option"}}],[11,"skip_current_dir","","",4,{"inputs":[{"name":"iterfilterentry"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","Returns the path associated with this error if one exists.",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",6,{"inputs":[{"name":"error"}],"output":{"name":"error"}}]],"paths":[[8,"WalkDirIterator"],[3,"WalkDir"],[3,"Iter"],[3,"DirEntry"],[3,"IterFilterEntry"],[3,"Error"],[3,"Error"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and &quot;free&quot; arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a &quot;free&quot; argument (i.e. non-flag) is encountered, stop\nconsidering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Debug` implementation to output detailed\ninformation.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There&#39;s an argument being passed to a non-argument option.",4,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",5,null],[13,"UnrecognizedOption_","","",5,null],[13,"OptionMissing_","","",5,null],[13,"OptionDuplicated_","","",5,null],[13,"UnexpectedArgument_","","",5,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",6,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",6,{"inputs":[{"name":"options"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",6,{"inputs":[{"name":"options"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",6,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a usage message from a set of options.",6,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",1,{"inputs":[{"name":"parsingstyle"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsingstyle"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"parsingstyle"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",2,{"inputs":[{"name":"hasarg"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"hasarg"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"hasarg"}],"output":{"name":"hasarg"}}],[11,"eq","","",3,{"inputs":[{"name":"occur"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"occur"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"occur"}],"output":{"name":"occur"}}],[11,"eq","","",0,{"inputs":[{"name":"matches"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"matches"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"eq","","",4,{"inputs":[{"name":"fail"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"fail"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"fail"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"fail"}],"output":{"name":"fail"}}],[11,"description","","",4,{"inputs":[{"name":"fail"}],"output":{"name":"str"}}],[11,"eq","","",5,{"inputs":[{"name":"failtype"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"failtype"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"failtype"}],"output":{"name":"failtype"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"matches"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"fail"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};
initSearch(searchIndex);
